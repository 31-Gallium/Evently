
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firebaseUid: 'firebaseUid',
  email: 'email',
  organizationName: 'organizationName',
  createdAt: 'createdAt',
  role: 'role'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  name: 'name',
  date: 'date',
  location: 'location',
  price: 'price',
  description: 'description',
  organizerName: 'organizerName',
  imageUrl: 'imageUrl',
  isFeatured: 'isFeatured',
  tags: 'tags',
  capacity: 'capacity',
  ticketsSold: 'ticketsSold',
  hypeCount: 'hypeCount',
  createdAt: 'createdAt',
  status: 'status',
  organizerId: 'organizerId'
};

exports.Prisma.UserHypeScalarFieldEnum = {
  userId: 'userId',
  eventId: 'eventId',
  createdAt: 'createdAt'
};

exports.Prisma.WatchlistScalarFieldEnum = {
  userId: 'userId',
  eventId: 'eventId',
  createdAt: 'createdAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventId: 'eventId',
  createdAt: 'createdAt'
};

exports.Prisma.WaitlistEntryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventId: 'eventId',
  createdAt: 'createdAt'
};

exports.Prisma.EventChangeRequestScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  changes: 'changes',
  reason: 'reason',
  createdAt: 'createdAt',
  eventId: 'eventId',
  organizerId: 'organizerId'
};

exports.Prisma.OrganizerRequestScalarFieldEnum = {
  id: 'id',
  status: 'status',
  requestedOrgName: 'requestedOrgName',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ORGANIZER: 'ORGANIZER',
  ADMIN: 'ADMIN'
};

exports.EventStatus = exports.$Enums.EventStatus = {
  DRAFT: 'DRAFT',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  PUBLISHED: 'PUBLISHED',
  REJECTED: 'REJECTED',
  CANCELED: 'CANCELED'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Event: 'Event',
  UserHype: 'UserHype',
  Watchlist: 'Watchlist',
  Booking: 'Booking',
  WaitlistEntry: 'WaitlistEntry',
  EventChangeRequest: 'EventChangeRequest',
  OrganizerRequest: 'OrganizerRequest'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\Base\\Desktop\\Seb\\evently-project\\server\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\Base\\Desktop\\Seb\\evently-project\\server\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": null,
        "value": "file:./dev.db"
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n\n// Defines the roles a user can have\nenum Role {\n  USER\n  ORGANIZER // New role for event creators\n  ADMIN\n}\n\n// Defines the status of an event in the approval workflow\nenum EventStatus {\n  DRAFT // Organizer is creating, not visible to public.\n  PENDING_APPROVAL // Submitted for admin review.\n  PUBLISHED // Approved and visible on the main site.\n  REJECTED // Admin rejected, organizer can edit and resubmit.\n  CANCELED // Canceled by an admin or organizer.\n}\n\n// New enum for Organizer Requests\nenum RequestStatus {\n  PENDING\n  APPROVED\n  REJECTED\n}\n\nmodel User {\n  id               String               @id @default(uuid())\n  firebaseUid      String               @unique\n  email            String               @unique\n  organizationName String?\n  createdAt        DateTime             @default(now())\n  role             Role                 @default(USER)\n  bookings         Booking[]\n  waitlistEntries  WaitlistEntry[]\n  createdEvents    Event[]              @relation(\"EventOrganizer\")\n  changeRequests   EventChangeRequest[]\n  organizerRequest OrganizerRequest?\n  hypedEvents      UserHype[] // Relation to hyped events\n  watchlist        Watchlist[]\n}\n\nmodel Event {\n  id             Int                  @id @default(autoincrement())\n  name           String\n  date           DateTime\n  location       String\n  price          Float\n  description    String\n  organizerName  String               @map(\"organizer\")\n  imageUrl       String?\n  isFeatured     Boolean              @default(false)\n  tags           String\n  capacity       Int\n  ticketsSold    Int                  @default(0)\n  hypeCount      Int                  @default(0) // New field for hype count\n  createdAt      DateTime             @default(now())\n  status         EventStatus          @default(DRAFT)\n  bookings       Booking[]\n  waitlist       WaitlistEntry[]\n  changeRequests EventChangeRequest[]\n  hypedBy        UserHype[] // Relation for users who hyped this\n  organizer      User?                @relation(\"EventOrganizer\", fields: [organizerId], references: [id])\n  organizerId    String?\n  watchlist      Watchlist[]\n}\n\n// New Join Table for Many-to-Many Hype relationship\nmodel UserHype {\n  user      User     @relation(fields: [userId], references: [id])\n  userId    String\n  event     Event    @relation(fields: [eventId], references: [id])\n  eventId   Int\n  createdAt DateTime @default(now())\n\n  @@id([userId, eventId])\n}\n\nmodel Watchlist {\n  user      User     @relation(fields: [userId], references: [id])\n  userId    String\n  event     Event    @relation(fields: [eventId], references: [id])\n  eventId   Int\n  createdAt DateTime @default(now())\n\n  @@id([userId, eventId])\n}\n\nmodel Booking {\n  id        Int      @id @default(autoincrement())\n  user      User     @relation(fields: [userId], references: [id])\n  userId    String\n  event     Event    @relation(fields: [eventId], references: [id])\n  eventId   Int\n  createdAt DateTime @default(now())\n\n  @@unique([userId, eventId])\n}\n\nmodel WaitlistEntry {\n  id        Int      @id @default(autoincrement())\n  user      User     @relation(fields: [userId], references: [id])\n  userId    String\n  event     Event    @relation(fields: [eventId], references: [id])\n  eventId   Int\n  createdAt DateTime @default(now())\n\n  @@unique([userId, eventId])\n}\n\nmodel EventChangeRequest {\n  id          String   @id @default(uuid())\n  type        String\n  status      String   @default(\"PENDING\")\n  changes     Json?\n  reason      String?\n  createdAt   DateTime @default(now())\n  event       Event    @relation(fields: [eventId], references: [id])\n  eventId     Int\n  organizer   User     @relation(fields: [organizerId], references: [id])\n  organizerId String\n}\n\nmodel OrganizerRequest {\n  id               String        @id @default(uuid())\n  status           RequestStatus @default(PENDING)\n  requestedOrgName String\n  createdAt        DateTime      @default(now())\n  user             User          @relation(fields: [userId], references: [id])\n  userId           String        @unique\n}\n",
  "inlineSchemaHash": "1c57f6a20f85d9c1575da9c7ab2f42a3891820cf83dac32ca16f6e71b79e7ffe",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firebaseUid\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizationName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToUser\"},{\"name\":\"waitlistEntries\",\"kind\":\"object\",\"type\":\"WaitlistEntry\",\"relationName\":\"UserToWaitlistEntry\"},{\"name\":\"createdEvents\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventOrganizer\"},{\"name\":\"changeRequests\",\"kind\":\"object\",\"type\":\"EventChangeRequest\",\"relationName\":\"EventChangeRequestToUser\"},{\"name\":\"organizerRequest\",\"kind\":\"object\",\"type\":\"OrganizerRequest\",\"relationName\":\"OrganizerRequestToUser\"},{\"name\":\"hypedEvents\",\"kind\":\"object\",\"type\":\"UserHype\",\"relationName\":\"UserToUserHype\"},{\"name\":\"watchlist\",\"kind\":\"object\",\"type\":\"Watchlist\",\"relationName\":\"UserToWatchlist\"}],\"dbName\":null},\"Event\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizerName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"organizer\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isFeatured\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"capacity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"ticketsSold\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"hypeCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"EventStatus\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToEvent\"},{\"name\":\"waitlist\",\"kind\":\"object\",\"type\":\"WaitlistEntry\",\"relationName\":\"EventToWaitlistEntry\"},{\"name\":\"changeRequests\",\"kind\":\"object\",\"type\":\"EventChangeRequest\",\"relationName\":\"EventToEventChangeRequest\"},{\"name\":\"hypedBy\",\"kind\":\"object\",\"type\":\"UserHype\",\"relationName\":\"EventToUserHype\"},{\"name\":\"organizer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EventOrganizer\"},{\"name\":\"organizerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"watchlist\",\"kind\":\"object\",\"type\":\"Watchlist\",\"relationName\":\"EventToWatchlist\"}],\"dbName\":null},\"UserHype\":{\"fields\":[{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserHype\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToUserHype\"},{\"name\":\"eventId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Watchlist\":{\"fields\":[{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWatchlist\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToWatchlist\"},{\"name\":\"eventId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Booking\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BookingToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"BookingToEvent\"},{\"name\":\"eventId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"WaitlistEntry\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWaitlistEntry\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToWaitlistEntry\"},{\"name\":\"eventId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"EventChangeRequest\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"changes\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"reason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToEventChangeRequest\"},{\"name\":\"eventId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"organizer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EventChangeRequestToUser\"},{\"name\":\"organizerId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"OrganizerRequest\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"RequestStatus\"},{\"name\":\"requestedOrgName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"OrganizerRequestToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {}
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

