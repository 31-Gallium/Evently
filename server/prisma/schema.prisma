// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Defines the roles a user can have
enum Role {
  USER
  ORGANIZER // New role for event creators
  ADMIN
}

// Defines the status of an event in the approval workflow
enum EventStatus {
  DRAFT            // Organizer is creating, not visible to public.
  PENDING_APPROVAL // Submitted for admin review.
  PUBLISHED        // Approved and visible on the main site.
  REJECTED         // Admin rejected, organizer can edit and resubmit.
  CANCELED         // Canceled by an admin or organizer.
}

// New enum for Organizer Requests
enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                 String            @id @default(uuid())
  firebaseUid        String            @unique
  email              String            @unique
  organizationName   String?
  createdAt          DateTime          @default(now())
  role               Role              @default(USER)
  bookings           Booking[]
  waitlistEntries    WaitlistEntry[]
  createdEvents      Event[]           @relation("EventOrganizer")
  changeRequests     EventChangeRequest[]
  organizerRequest   OrganizerRequest?
  hypedEvents        UserHype[]        // Relation to hyped events
  watchlist          Watchlist[]
}

model Event {
  id              Int                  @id @default(autoincrement())
  name            String
  date            DateTime
  location        String
  price           Float
  description     String
  organizerName   String               @map("organizer")
  imageUrl        String?
  isFeatured      Boolean              @default(false)
  tags            String
  capacity        Int
  ticketsSold     Int                  @default(0)
  hypeCount       Int                  @default(0) // New field for hype count
  createdAt       DateTime             @default(now())
  status          EventStatus          @default(DRAFT)
  bookings        Booking[]
  waitlist        WaitlistEntry[]
  changeRequests  EventChangeRequest[]
  hypedBy         UserHype[]           // Relation for users who hyped this
  organizer       User?                @relation("EventOrganizer", fields: [organizerId], references: [id])
  organizerId     String?
  watchlist       Watchlist[]
}

// New Join Table for Many-to-Many Hype relationship
model UserHype {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  createdAt DateTime @default(now())

  @@id([userId, eventId])
}

model Watchlist {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  createdAt DateTime @default(now())

  @@id([userId, eventId])
}

model Booking {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}

model WaitlistEntry {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}

model EventChangeRequest {
  id          String   @id @default(uuid())
  type        String
  status      String   @default("PENDING")
  changes     Json?
  reason      String?
  createdAt   DateTime @default(now())
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     Int
  organizer   User     @relation(fields: [organizerId], references: [id])
  organizerId String
}

model OrganizerRequest {
  id               String        @id @default(uuid())
  status           RequestStatus @default(PENDING)
  requestedOrgName String
  createdAt        DateTime      @default(now())
  user             User          @relation(fields: [userId], references: [id])
  userId           String        @unique
}